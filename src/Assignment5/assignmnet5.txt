R-4.5
Algorithm unionSortedSequences(A, B):

    i ← 0
    j ← 0
    C ← empty sequence

    while i < length(A) and j < length(B) do
        if A[i] < B[j] then
            if C is empty or C.last ≠ A[i]:
                C.append(A[i])
            i ← i + 1

        else if A[i] > B[j] then
            if C is empty or C.last ≠ B[j]:
                C.append(B[j])
            j ← j + 1

        else
            if C is empty or C.last ≠ A[i]:
                C.append(A[i])
            i ← i + 1
            j ← j + 1

    while i < length(A):
        if C is empty or C.last ≠ A[i]:
            C.append(A[i])
        i ← i + 1

    while j < length(B):
        if C is empty or C.last ≠ B[j]:
            C.append(B[j])
        j ← j + 1

    return C

R-4.9
Time Complexity = O(n log n)

but if implemented improperly (partitioning doesn't skip over already sorted parts),
 =>It can degrade to O(n^2).

Conclusion:
Use middle element as pivot → balances the recursion → O(n log n)

C-10
Algorithm countVotes(S):

    sort S

    maxCount ← 0
    currentCount ← 1
    winner ← S[0]

    for i ← 1 to length(S) - 1 do
        if S[i] = S[i - 1] then
            currentCount ← currentCount + 1
        else
            if currentCount > maxCount then
                maxCount ← currentCount
                winner ← S[i - 1]
            currentCount ← 1

       if currentCount > maxCount then
        winner ← S[length(S) - 1]

    return winner
